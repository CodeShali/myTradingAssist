version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-trading_platform}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Trading Engine (Python)
  trading_engine:
    build:
      context: ./backend/trading_engine
      dockerfile: Dockerfile
    container_name: trading_engine
    environment:
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      TRADING_MODE: ${TRADING_MODE:-paper}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_network
    restart: unless-stopped

  # API Gateway (Node.js)
  api_gateway:
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    environment:
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      PORT: 3000
      NODE_ENV: ${NODE_ENV:-production}
      FRONTEND_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_network
    restart: unless-stopped

  # Discord Bot (Node.js)
  discord_bot:
    build:
      context: ./backend/discord_bot
      dockerfile: Dockerfile
    container_name: discord_bot
    environment:
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      API_GATEWAY_URL: http://api_gateway:3000
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - api_gateway
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - trading_network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000
        VITE_WS_URL: ws://localhost:3000
    container_name: trading_frontend
    ports:
      - "3001:80"
    depends_on:
      - api_gateway
    networks:
      - trading_network
    restart: unless-stopped

networks:
  trading_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
